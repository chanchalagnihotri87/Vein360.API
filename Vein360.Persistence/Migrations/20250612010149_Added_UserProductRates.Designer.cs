// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vein360.Persistence;

#nullable disable

namespace Vein360.Persistence.Migrations
{
    [DbContext(typeof(Vein360Context))]
    [Migration("20250612010149_Added_UserProductRates")]
    partial class Added_UserProductRates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vein360.Domain.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("ClinicCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StreetLine")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HARRISON",
                            ClinicCode = "Clinic-0001",
                            ClinicName = "ABC Clinic",
                            Country = "US",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Phone = "9876543210",
                            PostalCode = "72601",
                            State = "AR",
                            StreetLine = "CLINIC STREET LINE 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "HARRISON",
                            ClinicCode = "Clinic-0002",
                            ClinicName = "XYZ Clinic",
                            Country = "US",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Phone = "9876543210",
                            PostalCode = "72601",
                            State = "AR",
                            StreetLine = "CLINIC STREET LINE 1",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContainerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<int?>("FedexPackagingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FedexTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabelFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MasterTrackingNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TrackingNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("UseOldLabel")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("DonorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 0.0,
                            ClinicId = 1,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            LabelFileName = "label.pdf",
                            PackageType = 2,
                            Status = 1,
                            TrackingNumber = 1234567890L,
                            UseOldLabel = false
                        },
                        new
                        {
                            Id = 2,
                            Amount = 0.0,
                            ClinicId = 1,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            LabelFileName = "label.pdf",
                            PackageType = 2,
                            Status = 1,
                            TrackingNumber = 1234567891L,
                            UseOldLabel = false
                        },
                        new
                        {
                            Id = 3,
                            Amount = 0.0,
                            ClinicId = 1,
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            LabelFileName = "label.pdf",
                            PackageType = 2,
                            Status = 3,
                            TrackingNumber = 1234567892L,
                            UseOldLabel = false
                        },
                        new
                        {
                            Id = 4,
                            Amount = 0.0,
                            ClinicId = 2,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            LabelFileName = "label.pdf",
                            PackageType = 2,
                            Status = 4,
                            TrackingNumber = 1234567893L,
                            UseOldLabel = false
                        },
                        new
                        {
                            Id = 5,
                            Amount = 0.0,
                            ClinicId = 2,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            LabelFileName = "label.pdf",
                            PackageType = 2,
                            Status = 1,
                            TrackingNumber = 1234567894L,
                            UseOldLabel = false
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonationContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedUnits")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ReplenishmentOrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("RequestedUnits")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("DonorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("DonationContainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1001L,
                            RequestedUnits = 10,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ApprovedUnits = 9,
                            ClinicId = 1,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1002L,
                            RequestedUnits = 9,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            ApprovedUnits = 8,
                            ClinicId = 1,
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1003L,
                            RequestedUnits = 8,
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            ApprovedUnits = 7,
                            ClinicId = 1,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1004L,
                            RequestedUnits = 7,
                            Status = 3
                        },
                        new
                        {
                            Id = 5,
                            ApprovedUnits = 6,
                            ClinicId = 1,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1005L,
                            RequestedUnits = 6,
                            Status = 3
                        },
                        new
                        {
                            Id = 6,
                            ApprovedUnits = 5,
                            ClinicId = 1,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1006L,
                            RequestedUnits = 5,
                            Status = 3
                        },
                        new
                        {
                            Id = 7,
                            ApprovedUnits = 4,
                            ClinicId = 2,
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1007L,
                            RequestedUnits = 4,
                            Status = 3
                        },
                        new
                        {
                            Id = 8,
                            ApprovedUnits = 3,
                            ClinicId = 2,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1008L,
                            RequestedUnits = 3,
                            Status = 3
                        },
                        new
                        {
                            Id = 9,
                            ApprovedUnits = 4,
                            ClinicId = 2,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1009L,
                            RequestedUnits = 4,
                            Status = 3
                        },
                        new
                        {
                            Id = 10,
                            ApprovedUnits = 5,
                            ClinicId = 2,
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1010L,
                            RequestedUnits = 5,
                            Status = 2
                        },
                        new
                        {
                            Id = 11,
                            ApprovedUnits = 6,
                            ClinicId = 2,
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1011L,
                            RequestedUnits = 6,
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            ApprovedUnits = 7,
                            ClinicId = 2,
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            DonorId = 1,
                            IsDeleted = false,
                            ReplenishmentOrderId = 1012L,
                            RequestedUnits = 7,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonationProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Accepted")
                        .HasColumnType("int");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RejectedClogged")
                        .HasColumnType("int");

                    b.Property<int>("RejectedDamaged")
                        .HasColumnType("int");

                    b.Property<int>("RejectedFunction")
                        .HasColumnType("int");

                    b.Property<int>("RejectedKinked")
                        .HasColumnType("int");

                    b.Property<int>("RejectedOther")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("ProductId");

                    b.ToTable("DonationProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accepted = 0,
                            DonationId = 1,
                            ProductId = 1,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 2,
                            Accepted = 0,
                            DonationId = 1,
                            ProductId = 2,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 3,
                            Accepted = 0,
                            DonationId = 1,
                            ProductId = 3,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 4,
                            Accepted = 0,
                            DonationId = 2,
                            ProductId = 1,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 5,
                            Accepted = 0,
                            DonationId = 2,
                            ProductId = 3,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 6,
                            Accepted = 0,
                            DonationId = 2,
                            ProductId = 5,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 7,
                            Accepted = 0,
                            DonationId = 3,
                            ProductId = 1,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 8,
                            Accepted = 0,
                            DonationId = 3,
                            ProductId = 4,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 9,
                            Accepted = 0,
                            DonationId = 3,
                            ProductId = 5,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 10,
                            Accepted = 0,
                            DonationId = 4,
                            ProductId = 1,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 11,
                            Accepted = 0,
                            DonationId = 4,
                            ProductId = 5,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 12,
                            Accepted = 0,
                            DonationId = 4,
                            ProductId = 2,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 13,
                            Accepted = 0,
                            DonationId = 5,
                            ProductId = 1,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 14,
                            Accepted = 0,
                            DonationId = 5,
                            ProductId = 2,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        },
                        new
                        {
                            Id = 15,
                            Accepted = 0,
                            DonationId = 5,
                            ProductId = 4,
                            RejectedClogged = 0,
                            RejectedDamaged = 0,
                            RejectedFunction = 0,
                            RejectedKinked = 0,
                            RejectedOther = 0,
                            Units = 1
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonorPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DefaultClinicId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Vein360UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultClinicId");

                    b.HasIndex("DonorId");

                    b.HasIndex("Vein360UserId");

                    b.ToTable("DonorPreferences");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description1",
                            Image = "ven-7-60b.jpg",
                            IsDeleted = false,
                            Name = "Vein360 Reprocessed ClosureFast Catheter (VEN-7-60B)",
                            Price = 1000m,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description2",
                            Image = "introducerkit.jpg",
                            IsDeleted = false,
                            Name = "Vein360 Complete Procedure Pack - 7F x 7 cm Introducer Kit",
                            Price = 1800m,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description2",
                            Image = "sheathkit.jpg",
                            IsDeleted = false,
                            Name = "Vein360 7F x 7 cm Introducer Sheath Kit",
                            Price = 900m,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description2",
                            Image = "procedurepack.jpg",
                            IsDeleted = false,
                            Name = "Vein360 Basic Procedure Pack",
                            Price = 2000m,
                            Type = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description2",
                            Image = "ven-7-80b.jpg",
                            IsDeleted = false,
                            Name = "Vein360 Reprocessed ClosureFast Catheter (VEN-7-80B)",
                            Price = 1200m,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Description = "Description2",
                            Image = "ven-7-100b.jpg",
                            IsDeleted = false,
                            Name = "Vein360 Reprocessed ClosureFast Catheter (VEN-7-100B)",
                            Price = 1500m,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.ShippingLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TrackingNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("ShippingLabels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543211L,
                            Used = false
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543212L,
                            Used = false
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543213L,
                            Used = false
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543214L,
                            Used = false
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543215L,
                            Used = false
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543216L,
                            Used = false
                        },
                        new
                        {
                            Id = 7,
                            ClinicId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543217L,
                            Used = false
                        },
                        new
                        {
                            Id = 8,
                            ClinicId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543218L,
                            Used = false
                        },
                        new
                        {
                            Id = 9,
                            ClinicId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543219L,
                            Used = false
                        },
                        new
                        {
                            Id = 10,
                            ClinicId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            TrackingNumber = 9876543220L,
                            Used = false
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.UserProductRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BuyingPrice")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PayFromSalesCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("PayToSalesCredit")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProductRates");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Vein360Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContainerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Vein360Containers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContainerCode = "CNT100001",
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            ContainerCode = "CNT100002",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            ContainerCode = "CNT100003",
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            ContainerCode = "CNT100004",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            ContainerCode = "CNT100005",
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            ContainerCode = "CNT100006",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            ContainerCode = "CNT100007",
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            ContainerCode = "CNT100008",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 9,
                            ContainerCode = "CNT100009",
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 10,
                            ContainerCode = "CNT100010",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 11,
                            ContainerCode = "CNT100011",
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            ContainerCode = "CNT100012",
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 13,
                            ContainerCode = "CNT100013",
                            ContainerTypeId = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            ContainerCode = "CNT100014",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            ContainerCode = "CNT100015",
                            ContainerTypeId = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            ContainerCode = "CNT100016",
                            ContainerTypeId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            IsDeleted = false,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Vein360ContainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Vein360ContainerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            EstimatedWeight = 6,
                            Height = 12,
                            IsDeleted = false,
                            Length = 14,
                            Name = "Vein360 Kit",
                            Width = 11
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            EstimatedWeight = 10,
                            IsDeleted = false,
                            Name = "Customer Shipper"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            EstimatedWeight = 20,
                            Height = 8,
                            IsDeleted = false,
                            Length = 24,
                            Name = "Urology Kit",
                            Width = 18
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Vein360User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDonor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.ToTable("Vein360Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "chanchalagnihotri1987@gmail.com",
                            IsAdmin = true,
                            IsDeleted = false,
                            IsDonor = true,
                            Name = "Chanchal Kumar",
                            Password = "chanchal"
                        });
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Clinic", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Vein360User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Donation", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vein360.Domain.Entities.Vein360ContainerType", "ContainerType")
                        .WithMany()
                        .HasForeignKey("ContainerTypeId");

                    b.HasOne("Vein360.Domain.Entities.Vein360User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("ContainerType");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonationContainer", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vein360.Domain.Entities.Vein360ContainerType", "ContainerType")
                        .WithMany()
                        .HasForeignKey("ContainerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vein360.Domain.Entities.Vein360User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("ContainerType");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonationProduct", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Donation", "Donation")
                        .WithMany("Products")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vein360.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.DonorPreference", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("DefaultClinicId");

                    b.HasOne("Vein360.Domain.Entities.Vein360User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vein360.Domain.Entities.Vein360User", null)
                        .WithMany("DonorPreferences")
                        .HasForeignKey("Vein360UserId");

                    b.Navigation("Clinic");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.ShippingLabel", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.UserProductRate", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Vein360User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Vein360Container", b =>
                {
                    b.HasOne("Vein360.Domain.Entities.Vein360ContainerType", "ContainerType")
                        .WithMany()
                        .HasForeignKey("ContainerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Donation", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Vein360.Domain.Entities.Vein360User", b =>
                {
                    b.Navigation("DonorPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
